/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

*,
*::after,
*::before {
  margin: 0;
  padding: 0;

  /* By setting to inherit each element will always inherit the box-sizing */
  /* Since we set the body{} element style to box-sizing: border-box , all 
    elelments will inherit this value from the body*/
  /* This is a best practice becaus now 3rd party plugins can set the 
     box-sizing of body to whatever value and all elements will inherit it.*/
  box-sizing: inherit;
}

html {
  /* To make 'rem' calc simple we want font-size = 10px*/
  /* But we shouldnt set it to 10px because that means */
  /*  that the browser will ignore font-size set by user     */
  /*   in browsersettings. So we need to set value that   */
  /*   is a % of the browser's font size. 10px / 16px = 62.5%*/
  /*   The default is 16px we want 10px so we find the factor*/

  font-size: 62.5%;
}

body {
  font-family: "Lato", sans-serif;

  font-size: 1.125rem; /*Use 'rem' so font sizes are relative to the browser user's font size prefrences.*/

  line-height: 1.7; /* Recommended default. 1.7 * the font-size; */

  font-weight: 400; /*values 100, 200 ... 900 where normal===400*/

  color: #666; /* #fff is pure white and #000 is pure black so #888 is in the middle*/

  padding: 3rem;

  box-sizing: border-box; /* width height defined will include the padding & border */
}

.header {
  height: 95vh;
  background-image: linear-gradient(
      to right bottom,
      /* rgb(126, 213, 111, 0.8), */ rgb(85, 197, 122, 0.7),
      rgb(40, 180, 133, 0.7)
    ),
    url("../img/hero.jpg");
  background-size: cover;
  background-position: top;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative;
}

/* ------------ */
/* LOGO */
/* ------------ */

.header__logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem;
}

.header__logo-image {
  height: 3.5rem;
}

/* ------------ */
/* TEXT TITLE */
/* ------------ */

.header__text-box {
  /* border: 1px solid red; */
  position: absolute;
  /* Positioning here is relative to parent element */
  top: 40%;
  left: 50%;
  /* Positioning here is relative to th element itself */
  transform: translate(-50%, -50%);
  text-align: center;
}

.heading-primary {
  font-weight: 400;
  text-transform: uppercase;
  color: #fff;
}

.heading-primary--main {
  display: block;

  font-size: 6rem;
  letter-spacing: 6.8rem;

  animation: moveFromLeft 1000ms ease-out 400ms;
  /* This property will hide the backside of the element */
  /* In some browsers the animation may flcker because the back side is visible */
  /* I did not see a need for this in chrome but as good practice I use it */
  backface-visibility: hidden;
}

.heading-primary--sub {
  display: block;

  font-size: 3.5rem;
  letter-spacing: 2.5rem;
  margin-bottom: 6rem;

  animation: moveFromRight 1000ms ease-out 400ms;
  backface-visibility: hidden;
}

/* --------------  */
/* TEXT ANIMATION  */
/* --------------  */

@keyframes moveFromLeft {
  0% {
    opacity: 0;
    transform: translateX(100rem);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveFromRight {
  0% {
    opacity: 0;
    transform: translateX(-100rem);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

/* ------------ */
/* CTA BUTTON   */
/* ------------ */

.btn:link,
.btn:visited {
  font-size: 2.4rem;
  /* border: none; */
  cursor: pointer;
  padding: 1rem 4rem;
  display: inline-block;
  border-radius: 20rem;
  text-decoration: none;
  text-transform: uppercase;
  /* When we use "transition: all" then when page refreshes the element */
  /* will animate, so better to be specific */
  /* transition: all 0.8s; */
  transition: transform 800ms;
  position: relative;
}

.btn:hover {
  transform: translateY(-0.4rem);
}

.btn--white {
  border: 1px black solid;
  background-color: #fff;
  color: #777;
}

.btn::after {
  content: "";
  display: inline-block;
  /* padding: 6rem 36rem; */
  /* The ::after pseudo element is treated a s a child of the btn element */
  /* So using 100% for width & height is 100% of the parent (the btn ) */
  /* This means that this ::after element is hiding behind the btn */
  height: 100%;
  width: 100%;
  border-radius: 20rem;

  /* Relative to the hosting component : Shifting half the width to the right & half its height up */
  position: absolute;
  top: -0;
  left: 0;

  /* Relative to itself, fine tuning the centering by shifting 
   itself (this "::after" element half its width to the right & half its height up */
  /* transform: translate(-50%, -50%); */
  z-index: -1;

  /* This is the original state of the ::after pseudo class */
  /* So here we need to put the transition ptroperty for btn:hover::after */
  transition: all 1000ms;
}

/* We use this rule because we want the ::after pseudo element to be white */
/* So the btn has its ::after and the btn--white holds the color */
.btn--white::after {
  background-color: #fff;
}

.btn:hover::after {
  transform: scale(1.5, 2);
  /* When we want to fade something out its final state is opacity: 0; */
  opacity: 0;
}

@keyframes moveFromBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }

  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

/* What btn-animated does is make the button appear from the bottom and move up to its restting place */
.btn--animated {
  /* animation name, duration, timing-function , delay*/
  animation: moveFromBottom 900ms ease-out 1400ms;

  /* The 'animation-fill-mode' property stes the beggining state of the animated property to have the values of first keyframe 
  ( in our case 0% ) */
  /* What this does is prevent the property from appearing on the screen
     before the animation starts  */
  animation-fill-mode: backwards;
}
